import os
import sys
import json
from flask import Flask, request, jsonify
from anthropic import Anthropic
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

app = Flask(__name__)

# Initialiser le client Anthropic
# Note: the newest Anthropic model is "claude-3-5-sonnet-20241022" which was released October 22, 2024
anthropic_key = os.environ.get('ANTHROPIC_API_KEY')
if not anthropic_key:
    print("ERREUR: La cl√© API ANTHROPIC_API_KEY n'est pas d√©finie dans les variables d'environnement", file=sys.stderr)
    sys.exit(1)

client = Anthropic(api_key=anthropic_key)

@app.route('/api/chat', methods=['POST'])
def chat():
    """
    API pour discuter avec Claude
    
    Exemple de requ√™te:
    {
        "message": "Comment puis-je √©conomiser sur mon budget d'anniversaire?",
        "budget_context": {
            "type": "anniversaire",
            "montant": 500,
            "postes": ["d√©coration", "nourriture", "cadeaux"]
        }
    }
    """
    try:
        data = request.json
        message = data.get('message', '')
        budget_context = data.get('budget_context', {})
        
        # Construire le message syst√®me avec le contexte
        system_prompt = """
        Tu es un assistant financier personnel intelligent nomm√© MaPocket Assistant.
        Ton r√¥le est d'aider les utilisateurs √† g√©rer leurs budgets et finances de mani√®re optimale.
        Tu dois toujours donner des conseils pratiques, bienveillants et personnalis√©s en fran√ßais.
        
        Voici quelques consignes importantes:
        - Sois pr√©cis et concis dans tes r√©ponses
        - Donne des conseils pratiques et r√©alistes
        - Adapte tes suggestions au contexte budg√©taire de l'utilisateur
        - √âvite le jargon financier complexe
        - Sois encourageant et positif
        - N'invente pas d'informations ou de chiffres que l'utilisateur n'a pas fournis
        - Respecte la confidentialit√© et la sensibilit√© des informations financi√®res
        """
        
        # Ajouter le contexte du budget s'il est fourni
        if budget_context:
            system_prompt += f"""
            Contexte du budget:
            Type de projet: {budget_context.get('type', 'non sp√©cifi√©')}
            Montant total: {budget_context.get('montant', 'non sp√©cifi√©')}‚Ç¨
            Postes de d√©penses: {', '.join(budget_context.get('postes', ['non sp√©cifi√©']))}
            
            Adapte tes r√©ponses √† ce contexte budg√©taire sp√©cifique.
            """
        
        # Appel √† l'API Claude
        response = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=1000,
            temperature=0.7,
            system=system_prompt,
            messages=[
                {"role": "user", "content": message}
            ]
        )
        
        # Extraire la r√©ponse de Claude
        assistant_response = response.content[0].text
        
        return jsonify({
            "response": assistant_response,
            "status": "success"
        })
        
    except Exception as e:
        print(f"Erreur lors de l'appel √† l'API Claude: {str(e)}", file=sys.stderr)
        return jsonify({
            "response": "D√©sol√©, une erreur est survenue. Veuillez r√©essayer plus tard.",
            "status": "error",
            "error": str(e)
        }), 500

@app.route('/api/create-project', methods=['POST'])
def create_project():
    """
    API pour g√©n√©rer automatiquement un projet structur√© √† partir d'un prompt utilisateur
    
    Exemple de requ√™te:
    {
        "prompt": "Je dois organiser un mariage indien avec un budget de 32 000 ‚Ç¨"
    }
    
    Exemple de r√©ponse:
    {
        "project": {
            "name": "Mariage indien",
            "type": "Mariage",
            "budget_total": 32000,
            "categories": [
                {"nom": "Lieu", "montant": 9000, "icon": "üè∞", "description": "R√©servation d'un lieu traditionnel"},
                {"nom": "Traiteur", "montant": 7500, "icon": "üçΩÔ∏è", "description": "Cuisine indienne + boissons"},
                {"nom": "Musique", "montant": 2000, "icon": "üéµ", "description": "DJ + c√©r√©monie sangeet"},
                {"nom": "Fleurs & d√©co", "montant": 2500, "icon": "üíê", "description": "D√©corations florales traditionnelles"},
                {"nom": "Tenues", "montant": 3000, "icon": "üëó", "description": "Tenues mari√©s + famille"},
                {"nom": "Photographe", "montant": 2000, "icon": "üì∏", "description": "Photo & vid√©o du mariage"},
                {"nom": "Transport", "montant": 1500, "icon": "üöó", "description": "Location de voiture, navette invit√©s"},
                {"nom": "Divers", "montant": 4500, "icon": "üîî", "description": "Cartes, cadeaux invit√©s, impr√©vus"}
            ]
        },
        "status": "success"
    }
    """
    try:
        data = request.json
        prompt = data.get('prompt', '')
        
        if not prompt:
            return jsonify({
                "error": "Le prompt ne peut pas √™tre vide",
                "status": "error"
            }), 400
        
        # Construire le prompt syst√®me pour Claude
        system_prompt = """
        Tu es un assistant financier sp√©cialis√© dans la cr√©ation de projets budg√©taires structur√©s.
        Ta t√¢che est d'analyser une demande en langage naturel et de g√©n√©rer un projet budg√©taire d√©taill√©.
        
        Voici comment proc√©der:
        1. Identifie le type de projet (Mariage, Anniversaire, Voyage, R√©novation, etc.)
        2. D√©termine le budget total mentionn√© (ou estime-le si non sp√©cifi√©)
        3. G√©n√®re des cat√©gories de d√©penses pertinentes pour ce type de projet
        4. Alloue intelligemment le budget entre ces cat√©gories
        5. Fournis une description concise pour chaque cat√©gorie
        6. Associe une ic√¥ne emoji appropri√©e √† chaque cat√©gorie
        
        Les cat√©gories doivent √™tre coh√©rentes avec le type de projet et les sp√©cificit√©s mentionn√©es.
        La somme des montants allou√©s doit √™tre √©gale au budget total.
        
        R√©ponds UNIQUEMENT avec un objet JSON structur√© comme suit:
        {
          "name": "Nom du projet",
          "type": "Type de projet",
          "budget_total": budget_total_en_nombre,
          "categories": [
            {
              "nom": "Nom de la cat√©gorie",
              "montant": montant_en_nombre,
              "icon": "emoji",
              "description": "Description concise"
            },
            ...
          ]
        }
        """
        
        # Appel √† l'API Claude
        response = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=1500,
            temperature=0.2,
            system=system_prompt,
            messages=[
                {"role": "user", "content": prompt}
            ]
        )
        
        # Extraire et parser la r√©ponse JSON de Claude
        assistant_response = response.content[0].text
        project_data = json.loads(assistant_response)
        
        return jsonify({
            "project": project_data,
            "status": "success"
        })
        
    except json.JSONDecodeError as e:
        print(f"Erreur de d√©codage JSON dans la r√©ponse de Claude: {str(e)}", file=sys.stderr)
        print(f"R√©ponse re√ßue: {assistant_response}", file=sys.stderr)
        return jsonify({
            "error": "Erreur lors de l'analyse de la r√©ponse",
            "status": "error",
            "details": str(e)
        }), 500
        
    except Exception as e:
        print(f"Erreur lors de la g√©n√©ration du projet: {str(e)}", file=sys.stderr)
        return jsonify({
            "error": "Une erreur est survenue lors de la g√©n√©ration du projet",
            "status": "error",
            "details": str(e)
        }), 500

@app.route('/api/suggestions', methods=['POST'])
def suggestions():
    """
    API pour obtenir des suggestions budg√©taires personnalis√©es
    
    Exemple de requ√™te:
    {
        "projet": {
            "type": "anniversaire",
            "nom": "Anniversaire de Sophie",
            "date": "2025-07-15",
            "budget_total": 500,
            "categories": [
                {"nom": "D√©coration", "montant": 100},
                {"nom": "Nourriture", "montant": 200},
                {"nom": "Animation", "montant": 150},
                {"nom": "Cadeaux", "montant": 50}
            ]
        },
        "historique_projets": [
            {
                "type": "anniversaire",
                "categories": [
                    {"nom": "D√©coration", "montant": 80},
                    {"nom": "Nourriture", "montant": 150},
                    {"nom": "Animation", "montant": 100},
                    {"nom": "Cadeaux", "montant": 70},
                    {"nom": "Photographe", "montant": 100}
                ]
            }
        ]
    }
    """
    try:
        data = request.json
        projet = data.get('projet', {})
        historique_projets = data.get('historique_projets', [])
        
        # Construire le prompt pour Claude
        system_prompt = """
        Tu es un assistant financier personnel intelligent nomm√© MaPocket Assistant, sp√©cialis√© dans l'optimisation des budgets.
        Ta mission est d'analyser un projet budg√©taire et de fournir des suggestions pertinentes en fran√ßais.
        
        Tes suggestions doivent inclure:
        1. D√©tection d'omissions: Identifie les √©l√©ments potentiellement oubli√©s dans le budget en comparant avec des projets similaires
        2. Opportunit√©s d'√©conomies: Sugg√®re des moyens d'optimiser certaines d√©penses sans sacrifier la qualit√©
        3. Alertes de d√©passement: Signale les cat√©gories o√π le budget semble insuffisant par rapport √† des projets similaires
        4. Conseils de planification: Propose des recommandations temporelles (quand r√©server, acheter, etc.)
        
        R√©ponds sous forme structur√©e avec 3-4 suggestions concr√®tes et pratiques, chacune avec:
        - Un titre concis
        - Une explication claire
        - Une estimation chiffr√©e quand c'est possible (√©conomie potentielle, montant recommand√©)
        """
        
        # Convertir les donn√©es du projet en texte pour le prompt
        projet_str = json.dumps(projet, ensure_ascii=False, indent=2)
        historique_str = json.dumps(historique_projets, ensure_ascii=False, indent=2)
        
        user_message = f"""
        Voici les d√©tails du projet √† analyser:
        {projet_str}
        
        Voici l'historique des projets similaires pour r√©f√©rence:
        {historique_str}
        
        Analyse ce budget et fournis 3-4 suggestions pertinentes pour l'optimiser, d√©tecter des omissions potentielles, ou am√©liorer sa planification.
        """
        
        # Appel √† l'API Claude
        response = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=1500,
            temperature=0.7,
            system=system_prompt,
            messages=[
                {"role": "user", "content": user_message}
            ]
        )
        
        # Extraire la r√©ponse de Claude
        assistant_response = response.content[0].text
        
        return jsonify({
            "suggestions": assistant_response,
            "status": "success"
        })
        
    except Exception as e:
        print(f"Erreur lors de l'appel √† l'API Claude pour les suggestions: {str(e)}", file=sys.stderr)
        return jsonify({
            "suggestions": "D√©sol√©, une erreur est survenue lors de la g√©n√©ration des suggestions. Veuillez r√©essayer plus tard.",
            "status": "error",
            "error": str(e)
        }), 500

if __name__ == '__main__':
    # D√©marrer le serveur sur le port 5000
    app.run(host='0.0.0.0', port=5001, debug=True)