// JavaScript for the New Project page

document.addEventListener('DOMContentLoaded', function() {
    console.log('New Project page initialized');
    
    // Initialize the form elements
    initializeProjectForm();
});

function initializeProjectForm() {
    // Date picker initialization (in a full implementation, this would use a date picker library)
    const dateInput = document.getElementById('projectDate');
    if (dateInput) {
        dateInput.addEventListener('click', function() {
            console.log('Date picker clicked');
            // In a full implementation, this would open a date picker
        });
    }
    
    // Template buttons
    const templateButtons = document.querySelectorAll('.template-btn');
    templateButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Remove active class from all buttons
            templateButtons.forEach(btn => btn.classList.remove('active'));
            
            // Add active class to clicked button
            this.classList.add('active');
            
            // Update the project type in heading
            const projectType = this.textContent.trim();
            document.querySelector('.project-type').textContent = projectType;
            
            // Update expense categories based on selected template
            updateExpenseCategories(projectType);
        });
    });
    
    // Initialiser le bouton d'ajout de cat√©gorie
    const addCategoryBtn = document.getElementById('addCategoryBtn');
    if (addCategoryBtn) {
        addCategoryBtn.addEventListener('click', addNewCategory);
    }
    
    // Initialiser les boutons de suppression de cat√©gorie
    initializeDeleteButtons();
    
    // Handle form submission
    const projectForm = document.getElementById('newProjectForm');
    if (projectForm) {
        projectForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Collect form data
            const formData = {
                projectName: document.getElementById('projectName').value,
                projectDate: document.getElementById('projectDate').value,
                totalBudget: document.getElementById('totalBudget').value,
                template: document.querySelector('.template-btn.active').textContent.trim(),
                categories: []
            };
            
            // Collect categories and amounts
            const categoryRows = document.querySelectorAll('.expense-table tbody tr:not(.total-row)');
            categoryRows.forEach(row => {
                const categoryNameInput = row.querySelector('.category-name-input');
                const categoryName = categoryNameInput ? categoryNameInput.value : 'Cat√©gorie';
                
                const description = row.querySelector('input[placeholder="Enter description"]') ? 
                    row.querySelector('input[placeholder="Enter description"]').value : '';
                
                const amountInput = row.querySelector('.amount-input');
                const amount = amountInput ? '‚Ç¨ ' + amountInput.value : '‚Ç¨ 0';
                
                formData.categories.push({
                    category: categoryName,
                    description: description,
                    amount: amount
                });
            });
            
            console.log('Form submitted:', formData);
            
            // In a real application, this would save the data and redirect to the dashboard
            alert('Projet cr√©√© avec succ√®s!');
            // Then redirect to dashboard
            window.location.href = 'index.html';
        });
    }
    
    // Initialize budget calculation
    initializeBudgetCalculation();
}

function updateExpenseCategories(templateType) {
    let categories = [];
    
    // Define categories based on template type
    switch (templateType) {
        // üéâ √âv√©nementiels
        case 'Anniversaire':
            categories = [
                { name: 'Traiteur', amount: '‚Ç¨ 200' },
                { name: 'D√©corations', amount: '‚Ç¨ 100' },
                { name: 'Animation', amount: '‚Ç¨ 100' },
                { name: 'Cadeaux', amount: '‚Ç¨ 100' },
                { name: 'Location salle', amount: '‚Ç¨ 150' }
            ];
            break;
        case 'Mariage':
            categories = [
                { name: 'Traiteur', amount: '‚Ç¨ 3000' },
                { name: 'Location salle', amount: '‚Ç¨ 1500' },
                { name: 'Tenues', amount: '‚Ç¨ 2000' },
                { name: 'Photographe', amount: '‚Ç¨ 1000' },
                { name: 'D√©coration', amount: '‚Ç¨ 800' },
                { name: 'Animation/DJ', amount: '‚Ç¨ 800' },
                { name: 'Alliances', amount: '‚Ç¨ 600' }
            ];
            break;
        case 'Baby shower':
            categories = [
                { name: 'D√©corations', amount: '‚Ç¨ 150' },
                { name: 'Nourriture', amount: '‚Ç¨ 200' },
                { name: 'Boissons', amount: '‚Ç¨ 100' },
                { name: 'Cadeaux', amount: '‚Ç¨ 150' },
                { name: 'Jeux & animations', amount: '‚Ç¨ 50' }
            ];
            break;
        case 'F√™te d\'entreprise':
            categories = [
                { name: 'Location espace', amount: '‚Ç¨ 1000' },
                { name: 'Traiteur', amount: '‚Ç¨ 1500' },
                { name: 'Boissons', amount: '‚Ç¨ 500' },
                { name: 'Animation', amount: '‚Ç¨ 800' },
                { name: 'D√©coration', amount: '‚Ç¨ 300' },
                { name: 'Transport', amount: '‚Ç¨ 400' }
            ];
            break;
        case 'C√©l√©bration religieuse':
            categories = [
                { name: 'Lieu de culte', amount: '‚Ç¨ 200' },
                { name: 'Tenue', amount: '‚Ç¨ 150' },
                { name: 'R√©ception', amount: '‚Ç¨ 500' },
                { name: 'Souvenirs', amount: '‚Ç¨ 150' },
                { name: 'D√©coration', amount: '‚Ç¨ 100' }
            ];
            break;
            
        // üè† Vie personnelle
        case 'Budget mensuel':
            categories = [
                { name: 'Loyer/Cr√©dit', amount: '‚Ç¨ 800' },
                { name: 'Charges', amount: '‚Ç¨ 150' },
                { name: 'Courses alimentaires', amount: '‚Ç¨ 400' },
                { name: 'Transport', amount: '‚Ç¨ 100' },
                { name: 'Loisirs', amount: '‚Ç¨ 150' },
                { name: '√âpargne', amount: '‚Ç¨ 200' }
            ];
            break;
        case 'D√©m√©nagement':
            categories = [
                { name: 'Location camion', amount: '‚Ç¨ 150' },
                { name: 'Cartons et mat√©riel', amount: '‚Ç¨ 100' },
                { name: 'Soci√©t√© de d√©m√©nagement', amount: '‚Ç¨ 800' },
                { name: 'Frais administratifs', amount: '‚Ç¨ 50' },
                { name: 'M√©nage', amount: '‚Ç¨ 100' },
                { name: 'Petits travaux', amount: '‚Ç¨ 200' }
            ];
            break;
        case 'Rentr√©e scolaire':
            categories = [
                { name: 'Fournitures', amount: '‚Ç¨ 100' },
                { name: 'V√™tements', amount: '‚Ç¨ 150' },
                { name: '√âquipement sportif', amount: '‚Ç¨ 80' },
                { name: 'Manuels', amount: '‚Ç¨ 50' },
                { name: 'Inscription activit√©s', amount: '‚Ç¨ 200' }
            ];
            break;
        case 'F√™tes de fin d\'ann√©e':
            categories = [
                { name: 'Cadeaux', amount: '‚Ç¨ 300' },
                { name: 'Repas', amount: '‚Ç¨ 200' },
                { name: 'D√©corations', amount: '‚Ç¨ 100' },
                { name: 'D√©placements', amount: '‚Ç¨ 150' },
                { name: 'Tenue', amount: '‚Ç¨ 100' }
            ];
            break;
        case 'Vacances':
            categories = [
                { name: 'Transport', amount: '‚Ç¨ 400' },
                { name: 'H√©bergement', amount: '‚Ç¨ 600' },
                { name: 'Restauration', amount: '‚Ç¨ 400' },
                { name: 'Activit√©s', amount: '‚Ç¨ 300' },
                { name: 'Souvenirs', amount: '‚Ç¨ 100' }
            ];
            break;
            
        // üíº Projets professionnels
        case 'Lancement de produit':
            categories = [
                { name: 'D√©veloppement', amount: '‚Ç¨ 2000' },
                { name: 'Marketing', amount: '‚Ç¨ 1500' },
                { name: 'Design', amount: '‚Ç¨ 1000' },
                { name: 'Communication', amount: '‚Ç¨ 1000' },
                { name: '√âv√©nement de lancement', amount: '‚Ç¨ 1500' }
            ];
            break;
        case 'Cr√©ation de site web':
            categories = [
                { name: 'Design', amount: '‚Ç¨ 500' },
                { name: 'D√©veloppement', amount: '‚Ç¨ 1000' },
                { name: 'Contenu', amount: '‚Ç¨ 300' },
                { name: 'H√©bergement', amount: '‚Ç¨ 100' },
                { name: 'SEO', amount: '‚Ç¨ 400' }
            ];
            break;
        case 'Campagne marketing':
            categories = [
                { name: 'Publicit√© en ligne', amount: '‚Ç¨ 1000' },
                { name: 'R√©seaux sociaux', amount: '‚Ç¨ 500' },
                { name: 'Contenus', amount: '‚Ç¨ 700' },
                { name: 'Graphisme', amount: '‚Ç¨ 400' },
                { name: 'Analyse & mesure', amount: '‚Ç¨ 300' }
            ];
            break;
        case 'Formation professionnelle':
            categories = [
                { name: 'Frais de formation', amount: '‚Ç¨ 1500' },
                { name: 'Mat√©riel p√©dagogique', amount: '‚Ç¨ 200' },
                { name: 'Transport', amount: '‚Ç¨ 200' },
                { name: 'H√©bergement', amount: '‚Ç¨ 300' },
                { name: 'Certification', amount: '‚Ç¨ 250' }
            ];
            break;
        case 'Lancement d\'entreprise':
            categories = [
                { name: 'Frais juridiques', amount: '‚Ç¨ 800' },
                { name: '√âquipement', amount: '‚Ç¨ 2000' },
                { name: 'Marketing initial', amount: '‚Ç¨ 1500' },
                { name: 'Local', amount: '‚Ç¨ 1000' },
                { name: 'Site web', amount: '‚Ç¨ 800' },
                { name: 'Stocks initiaux', amount: '‚Ç¨ 2000' }
            ];
            break;
            
        // üí∞ Objectifs financiers
        case '√âpargne mensuelle':
            categories = [
                { name: '√âpargne s√©curit√©', amount: '‚Ç¨ 200' },
                { name: '√âpargne projets', amount: '‚Ç¨ 300' },
                { name: '√âpargne retraite', amount: '‚Ç¨ 150' },
                { name: 'Investissements', amount: '‚Ç¨ 250' }
            ];
            break;
        case 'Remboursement de dettes':
            categories = [
                { name: 'Cr√©dit immobilier', amount: '‚Ç¨ 700' },
                { name: 'Cr√©dit auto', amount: '‚Ç¨ 300' },
                { name: 'Cr√©dit conso', amount: '‚Ç¨ 200' },
                { name: 'D√©couvert', amount: '‚Ç¨ 100' }
            ];
            break;
        case 'Projet "Gros achat"':
            categories = [
                { name: 'Achat principal', amount: '‚Ç¨ 2000' },
                { name: 'Accessoires', amount: '‚Ç¨ 300' },
                { name: 'Livraison/Installation', amount: '‚Ç¨ 150' },
                { name: 'Garantie/Assurance', amount: '‚Ç¨ 100' }
            ];
            break;
            
        // ü§ù Collectifs & communautaires
        case 'Cagnotte / tontine':
            categories = [
                { name: 'Contributions mensuelles', amount: '‚Ç¨ 1000' },
                { name: 'Int√©r√™ts', amount: '‚Ç¨ 50' },
                { name: 'Frais de gestion', amount: '‚Ç¨ 20' }
            ];
            break;
        case 'Association caritative':
            categories = [
                { name: 'Collecte de fonds', amount: '‚Ç¨ 1000' },
                { name: 'D√©penses op√©rationnelles', amount: '‚Ç¨ 500' },
                { name: 'Communication', amount: '‚Ç¨ 200' },
                { name: 'Mat√©riel', amount: '‚Ç¨ 300' }
            ];
            break;
        case 'Budget r√©union / AG':
            categories = [
                { name: 'Location salle', amount: '‚Ç¨ 300' },
                { name: 'Restauration', amount: '‚Ç¨ 200' },
                { name: 'Mat√©riel audiovisuel', amount: '‚Ç¨ 150' },
                { name: 'Documents', amount: '‚Ç¨ 50' }
            ];
            break;
        case 'Fonds commun':
            categories = [
                { name: 'Loyer & charges', amount: '‚Ç¨ 800' },
                { name: 'Courses', amount: '‚Ç¨ 400' },
                { name: 'Internet & TV', amount: '‚Ç¨ 50' },
                { name: '√âlectricit√©/Eau', amount: '‚Ç¨ 150' },
                { name: 'R√©parations', amount: '‚Ç¨ 100' }
            ];
            break;
            
        // Personnalis√©
        case 'Personnalis√©':
            categories = [
                { name: 'Cat√©gorie 1', amount: '‚Ç¨ 100' },
                { name: 'Cat√©gorie 2', amount: '‚Ç¨ 100' },
                { name: 'Cat√©gorie 3', amount: '‚Ç¨ 100' }
            ];
            break;
    }
    
    // Update the table with new categories
    const tableBody = document.querySelector('.expense-table tbody');
    let tableContent = '';
    
    let total = 0;
    
    // Parse amounts and calculate total
    categories.forEach(category => {
        const amount = parseInt(category.amount.replace('‚Ç¨', '').trim());
        total += amount;
        
        // Extraire la valeur num√©rique sans le symbole ‚Ç¨
        const amountValue = category.amount.replace('‚Ç¨', '').trim();
        
        tableContent += `
            <tr>
                <td><input type="text" class="form-control category-name-input" value="${category.name}" placeholder="Nom de la cat√©gorie"></td>
                <td><input type="text" class="form-control" placeholder="Enter description"></td>
                <td><input type="text" class="form-control amount-input" value="${amountValue}" data-category="${category.name.toLowerCase()}"></td>
                <td class="action-cell">
                    <button type="button" class="delete-category-btn">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            </tr>
        `;
    });
    
    // Add total row
    tableContent += `
        <tr class="total-row">
            <td colspan="3" class="text-right">Total:</td>
            <td class="total-cell">‚Ç¨ ${total}</td>
        </tr>
    `;
    
    // Update the table content
    tableBody.innerHTML = tableContent;
    
    // Update the total budget input
    document.getElementById('totalBudget').value = `‚Ç¨ ${total}`;
    
    // Update AI advice based on template
    updateAIAdvice(templateType);
}

function updateAIAdvice(templateType) {
    let advice = '';
    
    // Define advice based on template type
    switch (templateType) {
        // üéâ √âv√©nementiels
        case 'Anniversaire':
            advice = 'Pensez √† r√©server l\'animation au moins deux semaines √† l\'avance.';
            break;
        case 'Mariage':
            advice = 'Pr√©voyez 5-10% de budget suppl√©mentaire pour les impr√©vus de derni√®re minute.';
            break;
        case 'Baby shower':
            advice = 'Pensez √† des animations adapt√©es pour tous les invit√©s, pas uniquement centr√©es sur b√©b√©.';
            break;
        case 'F√™te d\'entreprise':
            advice = 'V√©rifiez les restrictions alimentaires de vos invit√©s avant de finaliser le menu.';
            break;
        case 'C√©l√©bration religieuse':
            advice = 'Confirmez les exigences sp√©cifiques du lieu de culte bien √† l\'avance.';
            break;
            
        // üè† Vie personnelle
        case 'Budget mensuel':
            advice = 'R√©servez 10% de votre budget pour les d√©penses impr√©vues.';
            break;
        case 'D√©m√©nagement':
            advice = 'Demandez plusieurs devis pour la soci√©t√© de d√©m√©nagement pour comparer les prix.';
            break;
        case 'Rentr√©e scolaire':
            advice = '√âtablissez une liste pr√©cise avant les achats pour √©viter les d√©penses superflues.';
            break;
        case 'F√™tes de fin d\'ann√©e':
            advice = 'Commencez vos achats de cadeaux t√¥t pour √©viter le stress et les ruptures de stock.';
            break;
        case 'Vacances':
            advice = 'R√©servez transport et h√©bergement en avance pour b√©n√©ficier des meilleurs tarifs.';
            break;
            
        // üíº Projets professionnels
        case 'Lancement de produit':
            advice = 'Pr√©voyez un budget de contingence d\'au moins 15% pour les impr√©vus.';
            break;
        case 'Cr√©ation de site web':
            advice = 'N\'oubliez pas d\'inclure les co√ªts de maintenance annuels dans votre budget.';
            break;
        case 'Campagne marketing':
            advice = 'Testez votre campagne sur un petit segment avant le d√©ploiement complet.';
            break;
        case 'Formation professionnelle':
            advice = 'V√©rifiez les possibilit√©s de prise en charge par votre entreprise ou un organisme.';
            break;
        case 'Lancement d\'entreprise':
            advice = 'Pr√©voyez suffisamment de tr√©sorerie pour couvrir 6 mois de fonctionnement sans revenus.';
            break;
            
        // üí∞ Objectifs financiers
        case '√âpargne mensuelle':
            advice = 'Automatisez vos virements d\'√©pargne d√®s r√©ception de votre salaire.';
            break;
        case 'Remboursement de dettes':
            advice = 'Commencez par rembourser les dettes aux taux d\'int√©r√™t les plus √©lev√©s.';
            break;
        case 'Projet "Gros achat"':
            advice = 'Comparez plusieurs mod√®les et vendeurs pour obtenir le meilleur rapport qualit√©-prix.';
            break;
            
        // ü§ù Collectifs & communautaires
        case 'Cagnotte / tontine':
            advice = '√âtablissez des r√®gles claires d√®s le d√©part pour √©viter les malentendus.';
            break;
        case 'Association caritative':
            advice = 'Recherchez des partenariats pour r√©duire vos co√ªts op√©rationnels.';
            break;
        case 'Budget r√©union / AG':
            advice = 'Pensez √† des alternatives num√©riques pour r√©duire les co√ªts de documentation.';
            break;
        case 'Fonds commun':
            advice = 'Utilisez une application de partage de d√©penses pour faciliter la gestion.';
            break;
            
        // Personnalis√©
        case 'Personnalis√©':
            advice = '√âtablissez un calendrier d√©taill√© pour g√©rer efficacement vos d√©penses.';
            break;
    }
    
    // Update the advice text
    const adviceElement = document.querySelector('.ai-advice p');
    if (adviceElement) {
        adviceElement.textContent = advice;
    }
}

function initializeBudgetCalculation() {
    console.log('Budget calculation initialized');
    
    // Ajouter des gestionnaires d'√©v√©nements pour les champs de montant
    document.addEventListener('input', function(e) {
        if (e.target && e.target.classList.contains('amount-input')) {
            updateTotalBudget();
        }
    });
    
    // Mise √† jour initiale
    updateTotalBudget();
}

// Fonction pour initialiser les boutons de suppression de cat√©gorie
function initializeDeleteButtons() {
    const deleteButtons = document.querySelectorAll('.delete-category-btn');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Trouver la ligne parente (tr) et la supprimer
            const row = this.closest('tr');
            if (row) {
                row.remove();
                
                // Mettre √† jour le total apr√®s la suppression
                updateTotalBudget();
            }
        });
    });
}

// Fonction pour ajouter une nouvelle cat√©gorie
function addNewCategory() {
    // Trouver le tableau
    const tableBody = document.querySelector('.expense-table tbody');
    
    // Trouver la ligne du total
    const totalRow = document.querySelector('.total-row');
    
    if (tableBody && totalRow) {
        // Cr√©er une nouvelle ligne avant la ligne du total
        const newRow = document.createElement('tr');
        
        // ID unique pour cette nouvelle cat√©gorie
        const uniqueId = 'category-' + Date.now();
        
        // Contenu de la nouvelle ligne
        newRow.innerHTML = `
            <td>
                <input type="text" class="form-control category-name-input" placeholder="Nom de la cat√©gorie" value="Nouvelle cat√©gorie">
            </td>
            <td>
                <input type="text" class="form-control" placeholder="Enter description">
            </td>
            <td>
                <input type="text" class="form-control amount-input" value="0" data-category="${uniqueId}">
            </td>
            <td class="action-cell">
                <button type="button" class="delete-category-btn">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        `;
        
        // Ins√©rer avant la ligne du total
        tableBody.insertBefore(newRow, totalRow);
        
        // Initialiser le bouton de suppression pour cette nouvelle cat√©gorie
        const deleteButton = newRow.querySelector('.delete-category-btn');
        deleteButton.addEventListener('click', function() {
            newRow.remove();
            updateTotalBudget();
        });
        
        // Mettre √† jour le total
        updateTotalBudget();
        
        // Focus sur le champ du nom de la cat√©gorie pour une modification imm√©diate
        const nameInput = newRow.querySelector('input[placeholder="Nom de la cat√©gorie"]');
        if (nameInput) {
            nameInput.focus();
            nameInput.select();
        }
    }
}

function updateTotalBudget() {
    let total = 0;
    const amountInputs = document.querySelectorAll('.amount-input');
    
    // Calculer le total √† partir de tous les champs de montant
    amountInputs.forEach(input => {
        const value = input.value.trim();
        // Extraire seulement les chiffres
        const amount = parseFloat(value.replace(/[^0-9.]/g, '')) || 0;
        total += amount;
    });
    
    // Mettre √† jour l'affichage du total
    const totalElement = document.querySelector('.total-row td:last-child');
    if (totalElement) {
        totalElement.textContent = `‚Ç¨ ${total}`;
        totalElement.className = 'total-cell';
    }
    
    // Mettre √† jour le champ de budget total
    const totalBudget = document.getElementById('totalBudget');
    if (totalBudget) {
        totalBudget.value = `‚Ç¨ ${total}`;
    }
}