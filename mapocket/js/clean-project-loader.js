/**
 * Gestionnaire de chargement de projet propre et structur√©
 * Remplace les fonctionnalit√©s de chargement de projet pr√©c√©dentes
 * pour √©viter les probl√®mes de doublons, de lignes manquantes et de montants incorrects
 */

document.addEventListener('DOMContentLoaded', function() {
    console.log('üßπ Initialisation du syst√®me propre de chargement de projet');

    // Variable globale pour stocker les donn√©es du projet en cours
    let currentProjectData = null;

    // 1. D√©terminer si nous sommes en mode √©dition et r√©cup√©rer l'ID du projet si c'est le cas
    const urlParams = new URLSearchParams(window.location.search);
    const projectId = urlParams.get('id');
    const isEditMode = urlParams.get('edit') === 'true';
    
    console.log(`Mode: ${isEditMode ? '√âdition' : 'Cr√©ation'}, ID Projet: ${projectId || 'Nouveau'}`);
    
    // Initialiser les √©couteurs d'√©v√©nements du bouton de sauvegarde
    initSaveButton();
    
    if (isEditMode && projectId) {
        // En mode √©dition, charger et afficher le projet
        console.log('üîÑ Chargement du projet pour √©dition...');
        
        // Nettoyer l'interface avant de charger le projet
        clearProjectInterface();
        
        // Charger le projet et l'afficher proprement
        cleanLoadProject(projectId);
    }
    
    /**
     * Initialise le bouton de sauvegarde du projet
     */
    function initSaveButton() {
        const saveButton = document.getElementById('saveProject');
        if (saveButton) {
            saveButton.addEventListener('click', function(e) {
                e.preventDefault();
                saveCurrentProject();
            });
            console.log('‚úÖ Bouton de sauvegarde initialis√©');
        } else {
            console.warn('‚ö†Ô∏è Bouton de sauvegarde non trouv√©');
        }
    }
    
    /**
     * Nettoie compl√®tement l'interface du projet
     */
    function clearProjectInterface() {
        console.log('üßπ Nettoyage complet de l\'interface du projet');
        
        // Nettoyer le conteneur de cat√©gories
        const categoriesContainer = document.getElementById('categoriesContainer');
        if (categoriesContainer) {
            categoriesContainer.innerHTML = '';
            console.log('‚úÖ Conteneur de cat√©gories vid√©');
        } else {
            console.error('‚ùå Conteneur de cat√©gories non trouv√©');
        }
        
        // R√©initialiser le formulaire
        const projectForm = document.getElementById('projectForm');
        if (projectForm) {
            projectForm.reset();
            console.log('‚úÖ Formulaire r√©initialis√©');
        }
    }
    
    /**
     * Charge et rend proprement un projet depuis son ID
     * @param {string} projectId - L'ID du projet √† charger
     */
    function cleanLoadProject(projectId) {
        console.log('üìÇ Chargement propre du projet:', projectId);
        
        // R√©cup√©rer les donn√©es du projet
        let projectData = null;
        
        // Essayer d'utiliser ProjectData.getProjectById (nouvelle architecture)
        if (window.ProjectData && typeof ProjectData.getProjectById === 'function') {
            projectData = ProjectData.getProjectById(projectId);
            console.log('üì¶ Projet r√©cup√©r√© via ProjectData');
        } 
        // Fallback: utiliser getProjectById (ancienne architecture)
        else if (typeof getProjectById === 'function') {
            projectData = getProjectById(projectId);
            console.log('üì¶ Projet r√©cup√©r√© via getProjectById');
        }
        
        if (!projectData) {
            console.error('‚ùå Projet non trouv√©:', projectId);
            alert('Projet non trouv√©. Veuillez r√©essayer.');
            return;
        }
        
        console.log('üìä Projet charg√©:', projectData);
        
        // Remplir les informations de base du projet
        fillBasicProjectInfo(projectData);
        
        // Rendre proprement la structure compl√®te du projet
        renderProjectStructure(projectData);
        
        // Finaliser le rendu
        finalizeProjectRendering();
    }
    
    /**
     * Remplit les informations de base d'un projet
     * @param {Object} projectData - Les donn√©es du projet
     */
    function fillBasicProjectInfo(projectData) {
        console.log('üìù Remplissage des informations de base du projet');
        
        // Remplir les champs de base
        const fields = [
            { id: 'projectName', value: projectData.projectName },
            { id: 'projectDate', value: projectData.projectDate },
            { id: 'projectEndDate', value: projectData.projectEndDate },
            { id: 'totalBudget', value: extractNumericValue(projectData.totalBudget) }
        ];
        
        fields.forEach(field => {
            const element = document.getElementById(field.id);
            if (element) {
                element.value = field.value || '';
                console.log(`‚úÖ Champ '${field.id}' d√©fini √† '${field.value}'`);
            } else {
                console.warn(`‚ö†Ô∏è √âl√©ment '${field.id}' non trouv√©`);
            }
        });
        
        // D√©finir le template
        const templateSelector = document.getElementById('templateSelector');
        if (templateSelector && projectData.template) {
            templateSelector.value = projectData.template;
            console.log(`‚úÖ Template d√©fini √† '${projectData.template}'`);
        }
        
        // D√©finir les options (checkboxes)
        const checkboxes = [
            { id: 'linkToWallet', checked: projectData.linkToWallet },
            { id: 'linkToWishlist', checked: projectData.linkToWishlist }
        ];
        
        checkboxes.forEach(checkbox => {
            const element = document.getElementById(checkbox.id);
            if (element) {
                element.checked = checkbox.checked || false;
                console.log(`‚úÖ Checkbox '${checkbox.id}' d√©finie √† '${checkbox.checked}'`);
            }
        });
    }
    
    /**
     * Rend la structure compl√®te du projet (cat√©gories, sous-cat√©gories, lignes)
     * @param {Object} projectData - Les donn√©es du projet
     */
    function renderProjectStructure(projectData) {
        console.log('üèóÔ∏è Rendu de la structure compl√®te du projet');
        
        const categoriesContainer = document.getElementById('categoriesContainer');
        if (!categoriesContainer) {
            console.error('‚ùå Conteneur de cat√©gories non trouv√©');
            return;
        }
        
        // S'assurer que le conteneur est vide
        categoriesContainer.innerHTML = '';
        
        // V√©rifier si le projet a des cat√©gories
        if (!projectData.categories || !Array.isArray(projectData.categories)) {
            console.warn('‚ö†Ô∏è Pas de cat√©gories dans le projet');
            return;
        }
        
        // Rendre chaque cat√©gorie
        projectData.categories.forEach(category => {
            renderCategory(categoriesContainer, category);
        });
        
        console.log(`‚úÖ ${projectData.categories.length} cat√©gories rendues`);
    }
    
    /**
     * Rend une cat√©gorie
     * @param {HTMLElement} container - Le conteneur o√π ajouter la cat√©gorie
     * @param {Object} category - Les donn√©es de la cat√©gorie
     */
    function renderCategory(container, category) {
        console.log(`üî∏ Rendu de la cat√©gorie: ${category.name}`);
        
        // Cr√©er l'√©l√©ment de cat√©gorie
        const categoryElement = document.createElement('div');
        categoryElement.className = 'expense-category';
        categoryElement.setAttribute('data-category', category.name);
        
        // Cr√©er l'en-t√™te de la cat√©gorie
        const categoryHeader = document.createElement('div');
        categoryHeader.className = 'category-header';
        
        // Cr√©er l'ic√¥ne de la cat√©gorie
        const categoryIcon = document.createElement('span');
        categoryIcon.className = 'category-icon';
        categoryIcon.textContent = category.icon || 'üìä';
        
        // Cr√©er le nom de la cat√©gorie
        const categoryName = document.createElement('span');
        categoryName.className = 'category-name';
        categoryName.textContent = category.name || 'Nouvelle cat√©gorie';
        categoryName.contentEditable = 'true';
        
        // Cr√©er le montant de la cat√©gorie
        const categoryAmount = document.createElement('span');
        categoryAmount.className = 'category-amount';
        categoryAmount.textContent = formatAmount(extractNumericValue(category.amount));
        
        // Cr√©er le bouton de suppression
        const deleteButton = document.createElement('button');
        deleteButton.className = 'btn-sm delete-category-btn';
        deleteButton.innerHTML = '<i class="fas fa-trash"></i>';
        
        // Assembler l'en-t√™te
        categoryHeader.appendChild(categoryIcon);
        categoryHeader.appendChild(categoryName);
        categoryHeader.appendChild(categoryAmount);
        categoryHeader.appendChild(deleteButton);
        
        // Cr√©er le conteneur des sous-cat√©gories
        const subcategoriesContainer = document.createElement('div');
        subcategoriesContainer.className = 'subcategories-container';
        
        // Cr√©er le pied de la cat√©gorie
        const categoryFooter = document.createElement('div');
        categoryFooter.className = 'category-footer';
        
        // Cr√©er le bouton d'ajout de sous-cat√©gorie
        const addSubcategoryButton = document.createElement('button');
        addSubcategoryButton.className = 'btn-sm add-subcategory-btn';
        addSubcategoryButton.innerHTML = '<i class="fas fa-plus"></i> Ajouter une sous-cat√©gorie';
        
        // Assembler le pied
        categoryFooter.appendChild(addSubcategoryButton);
        
        // Assembler la cat√©gorie
        categoryElement.appendChild(categoryHeader);
        categoryElement.appendChild(subcategoriesContainer);
        categoryElement.appendChild(categoryFooter);
        
        // Ajouter la cat√©gorie au conteneur
        container.appendChild(categoryElement);
        
        // Rendre les sous-cat√©gories
        if (category.subcategories && Array.isArray(category.subcategories)) {
            category.subcategories.forEach(subcategory => {
                renderSubcategory(subcategoriesContainer, subcategory);
            });
            console.log(`‚úÖ ${category.subcategories.length} sous-cat√©gories rendues pour ${category.name}`);
        }
        
        // Ajouter les √©couteurs d'√©v√©nements
        initializeCategoryEvents(categoryElement);
    }
    
    /**
     * Rend une sous-cat√©gorie
     * @param {HTMLElement} container - Le conteneur o√π ajouter la sous-cat√©gorie
     * @param {Object} subcategory - Les donn√©es de la sous-cat√©gorie
     */
    function renderSubcategory(container, subcategory) {
        console.log(`üîπ Rendu de la sous-cat√©gorie: ${subcategory.name}`);
        
        // Cr√©er l'√©l√©ment de sous-cat√©gorie
        const subcategoryElement = document.createElement('div');
        subcategoryElement.className = 'subcategory';
        
        // Cr√©er l'en-t√™te de la sous-cat√©gorie
        const subcategoryHeader = document.createElement('div');
        subcategoryHeader.className = 'subcategory-header';
        
        // Cr√©er le nom de la sous-cat√©gorie
        const subcategoryName = document.createElement('span');
        subcategoryName.className = 'subcategory-name';
        subcategoryName.textContent = subcategory.name || 'Nouvelle sous-cat√©gorie';
        subcategoryName.contentEditable = 'true';
        
        // Cr√©er le montant de la sous-cat√©gorie
        const subcategoryAmount = document.createElement('span');
        subcategoryAmount.className = 'subcategory-amount';
        subcategoryAmount.textContent = formatAmount(extractNumericValue(subcategory.amount));
        
        // Cr√©er le bouton de suppression
        const deleteButton = document.createElement('button');
        deleteButton.className = 'btn-sm delete-subcategory-btn';
        deleteButton.innerHTML = '<i class="fas fa-trash"></i>';
        
        // Assembler l'en-t√™te
        subcategoryHeader.appendChild(subcategoryName);
        subcategoryHeader.appendChild(subcategoryAmount);
        subcategoryHeader.appendChild(deleteButton);
        
        // Cr√©er le conteneur des lignes
        const linesContainer = document.createElement('div');
        linesContainer.className = 'expense-lines';
        
        // Cr√©er le pied de la sous-cat√©gorie
        const subcategoryFooter = document.createElement('div');
        subcategoryFooter.className = 'subcategory-footer';
        
        // Cr√©er le bouton d'ajout de ligne
        const addLineButton = document.createElement('button');
        addLineButton.className = 'btn-sm add-line-btn';
        addLineButton.innerHTML = '<i class="fas fa-plus"></i> Ajouter une ligne';
        
        // Assembler le pied
        subcategoryFooter.appendChild(addLineButton);
        
        // Assembler la sous-cat√©gorie
        subcategoryElement.appendChild(subcategoryHeader);
        subcategoryElement.appendChild(linesContainer);
        subcategoryElement.appendChild(subcategoryFooter);
        
        // Ajouter la sous-cat√©gorie au conteneur
        container.appendChild(subcategoryElement);
        
        // Rendre les lignes
        if (subcategory.lines && Array.isArray(subcategory.lines)) {
            subcategory.lines.forEach(line => {
                renderExpenseLine(linesContainer, line);
            });
            console.log(`‚úÖ ${subcategory.lines.length} lignes rendues pour ${subcategory.name}`);
        }
        
        // Ajouter les √©couteurs d'√©v√©nements
        initializeSubcategoryEvents(subcategoryElement);
    }
    
    /**
     * Rend une ligne de d√©pense
     * @param {HTMLElement} container - Le conteneur o√π ajouter la ligne
     * @param {Object} line - Les donn√©es de la ligne
     */
    function renderExpenseLine(container, line) {
        console.log(`üî∏ Rendu de la ligne: ${line.name} = ${line.amount}`);
        
        // S'assurer que l'objet ligne a les propri√©t√©s de base
        const safeLine = {
            name: line.name || 'Nouvelle d√©pense',
            amount: extractNumericValue(line.amount)
        };
        
        // Cr√©er l'√©l√©ment de ligne
        const lineElement = document.createElement('div');
        lineElement.className = 'expense-line';
        
        // Stocker les donn√©es de la ligne dans l'√©l√©ment DOM pour y acc√©der facilement
        lineElement.dataset.lineName = safeLine.name;
        lineElement.dataset.lineAmount = safeLine.amount;
        
        // Cr√©er le champ de nom
        const nameInput = document.createElement('input');
        nameInput.type = 'text';
        nameInput.className = 'line-name';
        nameInput.value = safeLine.name;
        
        // Cr√©er le champ de montant
        const amountInput = document.createElement('input');
        amountInput.type = 'number';
        amountInput.className = 'line-amount';
        amountInput.value = safeLine.amount;
        amountInput.step = "0.01";
        
        // Cr√©er le bouton de suppression
        const deleteButton = document.createElement('button');
        deleteButton.className = 'delete-line';
        deleteButton.innerHTML = 'üóëÔ∏è';
        
        // Assembler la ligne
        lineElement.appendChild(nameInput);
        lineElement.appendChild(amountInput);
        lineElement.appendChild(deleteButton);
        
        // Ajouter la ligne au conteneur
        container.appendChild(lineElement);
        
        // Ajouter les √©couteurs d'√©v√©nements
        initializeLineEvents(lineElement, safeLine);
    }
    
    /**
     * Initialise les √©couteurs d'√©v√©nements d'une cat√©gorie
     * @param {HTMLElement} categoryElement - L'√©l√©ment de cat√©gorie
     */
    function initializeCategoryEvents(categoryElement) {
        // √âcouteur pour le bouton de suppression
        const deleteButton = categoryElement.querySelector('.delete-category-btn');
        if (deleteButton) {
            deleteButton.addEventListener('click', function() {
                if (confirm('Voulez-vous vraiment supprimer cette cat√©gorie et toutes ses sous-cat√©gories ?')) {
                    categoryElement.remove();
                    recalculateAllAmounts();
                }
            });
        }
        
        // √âcouteur pour le bouton d'ajout de sous-cat√©gorie
        const addSubcategoryButton = categoryElement.querySelector('.add-subcategory-btn');
        if (addSubcategoryButton) {
            addSubcategoryButton.addEventListener('click', function() {
                const subcategoriesContainer = categoryElement.querySelector('.subcategories-container');
                if (subcategoriesContainer) {
                    const subcategory = {
                        name: 'Nouvelle sous-cat√©gorie',
                        amount: 0,
                        lines: []
                    };
                    renderSubcategory(subcategoriesContainer, subcategory);
                    recalculateAllAmounts();
                }
            });
        }
        
        // √âcouteur pour le nom (√©ditable)
        const nameElement = categoryElement.querySelector('.category-name');
        if (nameElement) {
            nameElement.addEventListener('blur', function() {
                categoryElement.setAttribute('data-category', this.textContent);
                recalculateAllAmounts();
            });
        }
    }
    
    /**
     * Initialise les √©couteurs d'√©v√©nements d'une sous-cat√©gorie
     * @param {HTMLElement} subcategoryElement - L'√©l√©ment de sous-cat√©gorie
     */
    function initializeSubcategoryEvents(subcategoryElement) {
        // √âcouteur pour le bouton de suppression
        const deleteButton = subcategoryElement.querySelector('.delete-subcategory-btn');
        if (deleteButton) {
            deleteButton.addEventListener('click', function() {
                if (confirm('Voulez-vous vraiment supprimer cette sous-cat√©gorie et toutes ses lignes ?')) {
                    subcategoryElement.remove();
                    recalculateAllAmounts();
                }
            });
        }
        
        // √âcouteur pour le bouton d'ajout de ligne
        const addLineButton = subcategoryElement.querySelector('.add-line-btn');
        if (addLineButton) {
            addLineButton.addEventListener('click', function() {
                const linesContainer = subcategoryElement.querySelector('.expense-lines');
                if (linesContainer) {
                    const line = {
                        name: 'Nouvelle d√©pense',
                        amount: 0
                    };
                    renderExpenseLine(linesContainer, line);
                    recalculateAllAmounts();
                }
            });
        }
    }
    
    /**
     * Initialise les √©couteurs d'√©v√©nements d'une ligne
     * @param {HTMLElement} lineElement - L'√©l√©ment de ligne
     */
    function initializeLineEvents(lineElement, lineData) {
        // S'assurer que lineData existe, sinon le cr√©er √† partir des valeurs des inputs
        if (!lineData) {
            lineData = {
                name: lineElement.querySelector('.line-name')?.value || '',
                amount: parseFloat(lineElement.querySelector('.line-amount')?.value || 0)
            };
        }
        
        // √âcouteur pour le bouton de suppression
        const deleteButton = lineElement.querySelector('.delete-line');
        if (deleteButton) {
            deleteButton.addEventListener('click', function() {
                lineElement.remove();
                recalculateProjectAmounts();
                // Mettre √† jour les donn√©es du projet apr√®s suppression
                collectAndSaveProjectData();
            });
        }
        
        // √âcouteur pour le nom de la d√©pense
        const nameInput = lineElement.querySelector('.line-name');
        if (nameInput) {
            nameInput.addEventListener('input', function() {
                // Mettre √† jour la valeur dans l'objet ligne (important)
                lineData.name = this.value;
                lineElement.dataset.lineName = this.value;
                // Mettre √† jour les donn√©es du projet apr√®s modification
                collectAndSaveProjectData();
            });
            
            nameInput.addEventListener('blur', function() {
                lineData.name = this.value;
                lineElement.dataset.lineName = this.value;
                collectAndSaveProjectData();
            });
        }
        
        // √âcouteurs pour le montant
        const amountInput = lineElement.querySelector('.line-amount');
        if (amountInput) {
            amountInput.addEventListener('input', function() {
                // Mettre √† jour la valeur dans l'objet ligne (important)
                const amount = parseFloat(this.value) || 0;
                lineData.amount = amount;
                lineElement.dataset.lineAmount = amount;
                // Recalculer tous les montants
                recalculateProjectAmounts();
                // Mettre √† jour les donn√©es du projet apr√®s modification
                collectAndSaveProjectData();
            });
            
            amountInput.addEventListener('change', function() {
                const amount = parseFloat(this.value) || 0;
                lineData.amount = amount;
                lineElement.dataset.lineAmount = amount;
                recalculateProjectAmounts();
                collectAndSaveProjectData();
            });
        }
    }
    
    /**
     * Finalise le rendu du projet
     */
    function finalizeProjectRendering() {
        console.log('üèÅ Finalisation du rendu du projet');
        
        // Ex√©cuter un recalcul complet
        setTimeout(function() {
            // Utiliser notre fonction de recalcul interne
            recalculateProjectAmounts();
            console.log('‚úÖ Recalcul final effectu√©');
        }, 200);
        
        // D√©sactiver tout autre syst√®me de chargement
        disableConflictingSystems();
    }
    
    /**
     * Recalcule tous les montants du projet en cascade
     * Lit les montants des lignes, calcule les sous-totaux et le total
     */
    function recalculateProjectAmounts() {
        console.log("üîÑ Recalcul en cascade lanc√©");

        let projectTotal = 0;

        // Pour chaque cat√©gorie
        document.querySelectorAll(".expense-category").forEach(categoryEl => {
            let categoryTotal = 0;

            const subcategories = categoryEl.querySelectorAll(".subcategory");
            subcategories.forEach(subEl => {
                let subTotal = 0;

                const lines = subEl.querySelectorAll(".expense-line");
                lines.forEach(lineEl => {
                    const amountInput = lineEl.querySelector(".line-amount");
                    const amount = parseFloat(amountInput?.value || 0);
                    subTotal += amount;
                });

                // Mettre √† jour le montant affich√© dans la sous-cat√©gorie
                const subAmountEl = subEl.querySelector(".subcategory-amount");
                if (subAmountEl) {
                    subAmountEl.textContent = formatAmount(subTotal);
                }

                categoryTotal += subTotal;
            });

            // Mettre √† jour le montant affich√© dans la cat√©gorie
            const catAmountEl = categoryEl.querySelector(".category-amount");
            if (catAmountEl) {
                catAmountEl.textContent = formatAmount(categoryTotal);
            }

            projectTotal += categoryTotal;
        });

        // Mettre √† jour le budget total du projet
        const totalBudgetEl = document.getElementById("totalBudget");
        if (totalBudgetEl) {
            totalBudgetEl.value = projectTotal;
        }

        console.log(`‚úÖ Recalcul termin√© : total = ${projectTotal}`);
    }
    
    /**
     * D√©sactive les syst√®mes qui pourraient entrer en conflit
     */
    function disableConflictingSystems() {
        console.log('üõë D√©sactivation des syst√®mes conflictuels');
        
        // Liste des fonctions √† d√©sactiver pour √©viter les conflits
        const functionsToDisable = [
            'loadProjectForEditing',
            'loadOldProjectData'
        ];
        
        functionsToDisable.forEach(funcName => {
            if (typeof window[funcName] === 'function') {
                window[funcName] = function() {
                    console.log(`üö´ Fonction ${funcName} d√©sactiv√©e par le syst√®me propre de chargement`);
                    return null;
                };
                console.log(`‚úÖ Fonction ${funcName} d√©sactiv√©e`);
            }
        });
    }
    
    /**
     * Collecte toutes les donn√©es du projet depuis le DOM et les sauvegarde
     */
    function collectAndSaveProjectData() {
        console.log('üíæ Collecte et sauvegarde des donn√©es du projet');
        
        // Cr√©er un objet pour contenir toutes les donn√©es
        const projectData = {
            projectName: document.getElementById('projectName')?.value,
            projectDate: document.getElementById('projectDate')?.value,
            projectEndDate: document.getElementById('projectEndDate')?.value,
            totalBudget: document.getElementById('totalBudget')?.value,
            template: document.getElementById('templateSelector')?.value,
            linkToWallet: document.getElementById('linkToWallet')?.checked,
            linkToWishlist: document.getElementById('linkToWishlist')?.checked,
            categories: []
        };
        
        // Si nous sommes en mode √©dition, r√©cup√©rer l'ID du projet
        const urlParams = new URLSearchParams(window.location.search);
        const projectId = urlParams.get('id');
        if (projectId) {
            projectData.id = projectId;
        } else {
            // G√©n√©rer un nouvel ID pour un nouveau projet
            projectData.id = Date.now().toString();
            projectData.createdAt = new Date().toISOString();
        }
        
        // Collecter toutes les cat√©gories
        document.querySelectorAll('.expense-category').forEach(categoryEl => {
            const categoryName = categoryEl.querySelector('.category-name')?.textContent;
            const categoryAmount = extractNumericValue(categoryEl.querySelector('.category-amount')?.textContent);
            
            const category = {
                name: categoryName,
                amount: categoryAmount,
                subcategories: []
            };
            
            // Collecter toutes les sous-cat√©gories de cette cat√©gorie
            categoryEl.querySelectorAll('.subcategory').forEach(subcategoryEl => {
                const subcategoryName = subcategoryEl.querySelector('.subcategory-name')?.textContent;
                const subcategoryAmount = extractNumericValue(subcategoryEl.querySelector('.subcategory-amount')?.textContent);
                
                const subcategory = {
                    name: subcategoryName,
                    amount: subcategoryAmount,
                    lines: []
                };
                
                // Collecter toutes les lignes de cette sous-cat√©gorie
                subcategoryEl.querySelectorAll('.expense-line').forEach(lineEl => {
                    const lineName = lineEl.querySelector('.line-name')?.value;
                    const lineAmount = parseFloat(lineEl.querySelector('.line-amount')?.value || 0);
                    
                    const line = {
                        name: lineName,
                        amount: lineAmount
                    };
                    
                    subcategory.lines.push(line);
                });
                
                category.subcategories.push(subcategory);
            });
            
            projectData.categories.push(category);
        });
        
        // Sauvegarder les donn√©es du projet
        saveCurrentProject(projectData);
        
        return projectData;
    }
    
    /**
     * Sauvegarde un projet dans le localStorage
     * @param {Object} projectData - Les donn√©es du projet √† sauvegarder
     */
    function saveCurrentProject(projectData) {
        console.log('üíæ Sauvegarde du projet dans localStorage:', projectData.projectName);
        
        // R√©cup√©rer tous les projets existants
        let allProjects = [];
        try {
            allProjects = JSON.parse(localStorage.getItem('savedProjects') || '[]');
        } catch (e) {
            console.error('Erreur lors de la lecture des projets:', e);
            allProjects = [];
        }
        
        // V√©rifier si le projet existe d√©j√†
        const existingIndex = allProjects.findIndex(p => p.id === projectData.id);
        
        if (existingIndex >= 0) {
            // Mettre √† jour le projet existant
            allProjects[existingIndex] = projectData;
            console.log('‚úÖ Projet mis √† jour dans localStorage');
        } else {
            // Ajouter le nouveau projet
            allProjects.push(projectData);
            console.log('‚úÖ Nouveau projet ajout√© dans localStorage');
        }
        
        // Sauvegarder tous les projets
        try {
            localStorage.setItem('savedProjects', JSON.stringify(allProjects));
            console.log(`‚úÖ ${allProjects.length} projets sauvegard√©s dans localStorage`);
        } catch (e) {
            console.error('Erreur lors de la sauvegarde des projets:', e);
        }
    }
    
    /**
     * Extrait une valeur num√©rique √† partir d'une cha√Æne ou d'un nombre
     * @param {string|number} value - La valeur √† convertir
     * @returns {number} La valeur num√©rique
     */
    function extractNumericValue(value) {
        if (value === undefined || value === null) return 0;
        
        if (typeof value === 'number') return value;
        
        if (typeof value === 'string') {
            // Supprimer tout sauf les chiffres, points, virgules et le signe moins
            const cleanedValue = value.replace(/[^0-9.,\-]/g, '').replace(',', '.');
            const numericValue = parseFloat(cleanedValue);
            return isNaN(numericValue) ? 0 : numericValue;
        }
        
        return 0;
    }
    
    /**
     * Formate un montant en devise
     * @param {number} amount - Le montant √† formater
     * @returns {string} Le montant format√©
     */
    function formatAmount(amount) {
        let currencySymbol = '‚Ç¨';
        
        // Utiliser la devise de l'utilisateur si disponible
        if (window.PreferencesManager && typeof PreferencesManager.getCurrentCurrencySymbol === 'function') {
            currencySymbol = PreferencesManager.getCurrentCurrencySymbol();
        }
        
        return `${currencySymbol} ${amount.toFixed(2).replace('.', ',')}`;
    }
    
    console.log('‚úÖ Syst√®me propre de chargement de projet initialis√© avec succ√®s');
});